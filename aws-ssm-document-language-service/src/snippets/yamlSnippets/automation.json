[
    {
        "body": ["- name: examplePause", "\taction: aws:pause", "\tinputs: {}"],
        "name": "$Plugin Snippet aws:pause",
        "description": "Insert Snippet for aws:pause.\n\nThis action pauses the Automation execution. Once paused, the execution status is Waiting. To continue the Automation execution, use the SendAutomationSignal API action with the Resume signal type."
    },
    {
        "body": [
            "- name: exampleRunCommand",
            "\taction: aws:runCommand",
            "\tinputs:",
            "\t\tDocumentName: AWS-RunPowerShellScript",
            "\t\tInstanceIds:",
            "\t\t\t- '{{InstanceIds}}'",
            "\t\tParameters:",
            "\t\t\tcommands:",
            "\t\t\t\t- (Get-WmiObject -Class Win32_ComputerSystem).PartOfDomain"
        ],
        "name": "$Plugin Snippet aws:runCommand",
        "description": "Insert Snippet for aws:runCommand.\n\nRuns the specified commands."
    },
    {
        "body": [
            "- name: exampleAssertAwsResourceProperty",
            "\taction: aws:assertAwsResourceProperty",
            "\tinputs:",
            "\t\tService: The official namespace of the service",
            "\t\tApi: The API action or method name",
            "\t\tAPI action inputs or parameters: A value",
            "\t\tPropertySelector: Response object",
            "\t\tDesiredValues:",
            "\t\t- Desired property values"
        ],
        "name": "$Plugin Snippet aws:assertAwsResourceProperty",
        "description": "Insert Snippet for aws:assertAwsResourceProperty.\n\nThe aws:assertAwsResourceProperty action enables you to assert a specific resource state or event state for a specific Automation step. For example, you can specify that an Automation step must wait for an EC2 instance to start. Then it will call the Amazon EC2 DescribeInstanceStatus API action with the DesiredValue property of running. This ensures that the Automation workflow waits for a running instance and then continues when the instance is, in fact, running."
    },
    {
        "body": [
            "- name: exampleExecuteAwsApi",
            "\taction: aws:executeAwsApi",
            "\tinputs:",
            "\t\tService: The official namespace of the service",
            "\t\tApi: The API action or method name",
            "\t\tAPI action inputs or parameters: A value",
            "\toutputs: # These are user-specified outputs",
            "\t- Name: The name for a user-specified output key",
            "\t\tSelector: A response object specified by using jsonpath format",
            "\t\tType: The data type"
        ],
        "name": "$Plugin Snippet aws:executeAwsApi",
        "description": "Insert Snippet for aws:executeAwsApi.\n\nCalls and runs AWS API actions. Most API actions are supported, although not all API actions have been tested."
    },
    {
        "body": [
            "- name: exampleExecuteAutomation",
            "\taction: aws:executeAutomation",
            "\tmaxAttempts: 3",
            "\ttimeoutSeconds: 3600",
            "\tonFailure: Abort",
            "\tinputs:",
            "\t\tDocumentName: secondaryWorkflow",
            "\t\tRuntimeParameters:",
            "\t\t\tinstanceIds:",
            "\t\t\t- i-1234567890abcdef0"
        ],
        "name": "$Plugin Snippet aws:executeAutomation",
        "description": "Insert Snippet for aws:executeAutomation.\n\nRuns a secondary Automation workflow by calling a secondary Automation document. With this action, you can create Automation documents for your most common workflows, and reference those documents during an Automation execution. This action can simplify your Automation documents by removing the need to duplicate steps across similar documents.\n\nThe secondary Automation runs in the context of the user who initiated the primary Automation. This means that the secondary Automation uses the same IAM role or user account as the user who started the first Automation.\n\nIf you specify parameters in a secondary Automation that use an assume role (a role that uses the iam:passRole policy), then the user or role that initiated the primary Automation must have permission to pass the assume role specified in the secondary Automation."
    },
    {
        "body": [
            "- name: exampleBranch",
            "\taction: aws:branch",
            "\tinputs:",
            "\t\tChoices:",
            "\t\t- NextStep: runWindowsCommand",
            "\t\t\tVariable: \"{{Name of a parameter defined in the Parameters section. For example: OS_name}}\"",
            "\t\t\tStringEquals: windows",
            "\t\t- NextStep: runLinuxCommand",
            "\t\t\tVariable: \"{{Name of a parameter defined in the Parameters section. For example: OS_name}}\"",
            "\t\t\tStringEquals: linux",
            "\t\tDefault:",
            "\t\t\tsleep3"
        ],
        "name": "$Plugin Snippet aws:branch",
        "description": "Insert Snippet for aws:branch.\n\nThe aws:branch action enables you to create a dynamic Automation workflow that evaluates different choices in a single step and then jumps to a different step in the Automation document based on the results of that evaluation.\n\nWhen you specify the aws:branch action for a step, you specify Choices that the workflow must evaluate. The Choices can be based on either a value that you specified in the Parameters section of the Automation document, or a dynamic value generated as the output from the previous step. The Automation workflow evaluates each choice by using a Boolean expression. If the first choice is true, then the workflow jumps to the step designated for that choice. If the first choice is false, the workflow evaluates the next choice. The workflow continues evaluating each choice until it process a true choice. The workflow then jumps to the designated step for the true choice.\n\nIf none of the choices are true, the workflow checks to see if the step contains a default value. A default value defines a step that the workflow should jump to if none of the choices are true. If no default value is specified for the step, then the Automation workflow processes the next step in the document.\n\nThe aws:branch action supports complex choice evaluations by using a combination of And, Not, and Or operators."
    },
    {
        "body": [
            "- name: exampleCopyImage",
            "\taction: aws:copyImage",
            "\tmaxAttempts: 3",
            "\tonFailure: Abort",
            "\tinputs:",
            "\t\tSourceImageId: ami-0fe10819",
            "\t\tSourceRegion: ap-northeast-2",
            "\t\tImageName: Encrypted Copy of LAMP base AMI in ap-northeast-2",
            "\t\tEncrypted: true"
        ],
        "name": "$Plugin Snippet aws:copyImage",
        "description": "Insert Snippet for aws:copyImage.\n\nCopies an AMI from any region into the current region. This action can also encrypt the new AMI."
    },
    {
        "body": [
            "- name: exampleExecuteStateMachie",
            "\taction: aws:executeStateMachine",
            "\tinputs:",
            "\t\tstateMachineArn: StateMachine_ARN",
            "\t\tinput: '{\"parameters\":\"values\"}'",
            "\t\tname: name"
        ],
        "name": "$Plugin Snippet aws:executeStateMachine",
        "description": "Insert Snippet for aws:executeStateMachine.\n\nRun an AWS Step Functions state machine."
    },
    {
        "body": [
            "- name: exampleRunInstance",
            "\taction: aws:runInstances",
            "\tmaxAttempts: 3",
            "\ttimeoutSeconds: 1200",
            "\tonFailure: Abort",
            "\tinputs:",
            "\t\tImageId: ami-12345678",
            "\t\tInstanceType: t2.micro",
            "\t\tMinInstanceCount: 1",
            "\t\tMaxInstanceCount: 1",
            "\t\tIamInstanceProfileName: myRunCmdRole",
            "\t\tTagSpecifications:",
            "\t\t- ResourceType: instance",
            "\t\t\tTags:",
            "\t\t\t- Key: LaunchedBy",
            "\t\t\t\tValue: SSMAutomation",
            "\t\t\t- Key: Category",
            "\t\t\t\tValue: HighAvailabilityFleetHost"
        ],
        "name": "$Plugin Snippet aws:runInstances",
        "description": "Insert Snippet for aws:runInstances.\n\nLaunches a new instance."
    },
    {
        "body": [
            "- name: exampleWaitForAwsResourceProperty",
            "\taction: aws:waitForAwsResourceProperty",
            "\tinputs:",
            "\t\tService: The official namespace of the service",
            "\t\tApi: The API action or method name",
            "\t\tAPI action inputs or parameters: A value",
            "\t\tPropertySelector: Response object",
            "\t\tDesiredValues:",
            "\t\t- Desired property value"
        ],
        "name": "$Plugin Snippet aws:waitForAwsResourceProperty",
        "description": "Insert Snippet for aws:waitForAwsResourceProperty.\n\nThe aws:waitForAwsResourceProperty action enables your Automation workflow to wait for a specific resource state or event state before continuing the workflow."
    },
    {
        "body": [
            "- name: exampleInvokeLambdaFunction",
            "\taction: aws:invokeLambdaFunction",
            "\tmaxAttempts: 3",
            "\ttimeoutSeconds: 120",
            "\tonFailure: Abort",
            "\tinputs:",
            "\t\tFunctionName: MyLambdaFunction"
        ],
        "name": "$Plugin Snippet aws:invokeLambdaFunction",
        "description": "Insert Snippet for aws:invokeLambdaFunction.\n\nInvokes the specified Lambda function."
    },
    {
        "body": [
            "- name: exampleCreateStack",
            "\taction: aws:createStack",
            "\tmaxAttempts: 1",
            "\tonFailure: Abort",
            "\tinputs:",
            "\t\tCapabilities:",
            "\t\t- CAPABILITY_IAM",
            "\t\tStackName: myStack",
            "\t\tTemplateURL: http://s3.amazonaws.com/mybucket/myStackTemplate",
            "\t\tTimeoutInMinutes: 5"
        ],
        "name": "$Plugin Snippet aws:createStack",
        "description": "Insert Snippet for aws:createStack.\n\nCreates a new AWS CloudFormation stack from a template."
    },
    {
        "body": ["- name: exampleSleep", "\taction: aws:sleep", "\tinputs:", "\t\tDuration: PT10M"],
        "name": "$Plugin Snippet aws:sleep",
        "description": "Insert Snippet for aws:sleep.\n\nDelays Automation execution for a specified amount of time. This action uses the International Organization for Standardization (ISO) 8601 date and time format."
    },
    {
        "body": [
            "- name: exampleDeleteStack",
            "\taction: aws:deleteStack",
            "\tmaxAttempts: 1",
            "\tonFailure: Abort",
            "\tinputs:",
            "\t\tStackName: \"{{stackName}}\""
        ],
        "name": "$Plugin Snippet aws:deleteStack",
        "description": "Insert Snippet for aws:deleteStack.\n\nDeletes an AWS CloudFormation stack."
    },
    {
        "body": [
            "- name: exampleExecuteScript",
            "\taction: aws:executeScript",
            "\tinputs:",
            "\t\tRuntime: \"python3.6\"",
            "\t\tHandler: \"script_handler\"",
            "\t\tInputPayload:",
            "\t\t\t\"parameter1\": \"parameter_value1\"",
            "\t\t\t\"parameter2\": \"parameter_value2\"",
            "\t\tScript:",
            "\t\t\t-",
            "\t\t\t\"def script_handler(events, context):\"",
            "\t\t\t-",
            "\t\t\t\"(script commands)\""
        ],
        "name": "$Plugin Snippet aws:executeScript",
        "description": "Insert Snippet for aws:executeScript.\n\nRuns the Python or PowerShell script provided, using the specified runtime and handler. (For PowerShell, the handler is not required.)\n\nCurrently, the aws:executeScript action contains the following preinstalled PowerShell Core modules.\n\tMicrosoft.PowerShell.Host\n\tMicrosoft.PowerShell.Management\n\tMicrosoft.PowerShell.Security\n\tMicrosoft.PowerShell.Utility\n\tPackageManagement\n\tPowerShellGet"
    },
    {
        "body": [
            "- name: exampleCreateImage",
            "\taction: aws:createImage",
            "\tmaxAttempts: 3",
            "\tonFailure: Abort",
            "\tinputs:",
            "\t\tInstanceId: i-1234567890abcdef0",
            "\t\tImageName: AMI Created on{{global:DATE_TIME}}",
            "\t\tNoReboot: true",
            "\t\tImageDescription: My newly created AMI"
        ],
        "name": "$Plugin Snippet aws:createImage",
        "description": "Insert Snippet for aws:createImage.\n\nCreates a new AMI from an instance that is either running or stopped."
    },
    {
        "body": [
            "- name: exampleApprove",
            "\taction: aws:approve",
            "\ttimeoutSeconds: 1000",
            "\tonFailure: Abort",
            "\tinputs:",
            "\t\tNotificationArn: arn:aws:sns:us-east-2:12345678901:AutomationApproval",
            "\t\tMessage: \"{{ message }}\"",
            "\t\tMinRequiredApprovals: 1",
            "\t\tApprovers:",
            "\t\t- arn:aws:iam::12345678901:user/AWS-User-1"
        ],
        "name": "$Plugin Snippet aws:approve",
        "description": "Insert Snippet for aws:approve.\n\nTemporarily pauses an Automation execution until designated principals either approve or reject the action. After the required number of approvals is reached, the Automation execution resumes. You can insert the approval step any place in the mainSteps section of your Automation document.\n\nThe default timeout for this action is 7 days (604800 seconds). You can limit or extend the timeout by specifying the timeoutSeconds parameter for an aws:approve step. If the automation step reaches the timeout value before receiving all required approval decisions, then the step and the automation stop running and return a status of Timed Out."
    },
    {
        "body": [
            "- name: exampleDeleteImage",
            "\taction: aws:deleteImage",
            "\tmaxAttempts: 3",
            "\ttimeoutSeconds: 180",
            "\tonFailure: Abort",
            "\tinputs:",
            "\t\tImageId: ami-12345678"
        ],
        "name": "$Plugin Snippet aws:deleteImage",
        "description": "Insert Snippet for aws:deleteImage.\n\nDeletes the specified image and all related snapshots."
    },
    {
        "body": [
            "- name: exampleChangeInstanceState",
            "\taction: aws:changeInstanceState",
            "\tmaxAttempts: 3",
            "\ttimeoutSeconds: 3600",
            "\tonFailure: Abort",
            "\tinputs:",
            "\t\tInstanceIds:",
            "\t\t- i-1234567890abcdef0",
            "\t\tCheckStateOnly: true",
            "\t\tDesiredState: stopped"
        ],
        "name": "$Plugin Snippet aws:changeInstanceState",
        "description": "Insert Snippet for aws:changeInstanceState.\n\nChanges or asserts the state of the instance.\n\nThis action can be used in assert mode (do not run the API to change the state but verify the instance is in the desired state.) To use assert mode, set the CheckStateOnly parameter to true. This mode is useful when running the Sysprep command on Windows, which is an asynchronous command that can run in the background for a long time. You can ensure that the instance is stopped before you create an AMI."
    },
    {
        "body": [
            "- name: exampleCreateTags",
            "\taction: aws:createTags",
            "\tmaxAttempts: 3",
            "\tonFailure: Abort",
            "\tinputs:",
            "\t\tResourceType: EC2",
            "\t\tResourceIds:",
            "\t\t- ami-9a3768fa",
            "\t\t- i-02951acd5111a8169",
            "\t\tTags:",
            "\t\t- Key: production",
            "\t\t\tValue: ''",
            "\t\t- Key: department",
            "\t\t\tValue: devops"
        ],
        "name": "$Plugin Snippet aws:createTags",
        "description": "Insert Snippet for aws:createTags.\n\nCreate new tags for EC2 instances or Systems Manager managed instances."
    }
]
