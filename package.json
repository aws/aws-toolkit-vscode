{
    "name": "aws-toolkit-vscode",
    "displayName": "AWS Toolkit",
    "description": "An extension for working with Amazon Web Services",
    "version": "1.19.0-SNAPSHOT",
    "publisher": "amazonwebservices",
    "license": "Apache-2.0",
    "repository": {
        "type": "git",
        "url": "https://github.com/aws/aws-toolkit-vscode"
    },
    "engines": {
        "vscode": "^1.42.0"
    },
    "icon": "resources/aws-icon-256x256.png",
    "bugs": {
        "url": "https://github.com/aws/aws-toolkit-vscode/issues"
    },
    "galleryBanner": {
        "color": "#FF9900",
        "theme": "light"
    },
    "categories": [
        "Debuggers",
        "Other"
    ],
    "keywords": [
        "AWS",
        "Lambda",
        "Serverless"
    ],
    "preview": false,
    "qna": "https://github.com/aws/aws-toolkit-vscode/issues",
    "activationEvents": [
        "onStartupFinished",
        "onDebugResolve:aws-sam",
        "onCommand:aws.login",
        "onCommand:aws.credential.profile.create",
        "onCommand:aws.logout",
        "onCommand:aws.createIssueOnGitHub",
        "onCommand:aws.submitFeedback",
        "onCommand:aws.showRegion",
        "onCommand:aws.hideRegion",
        "onView:aws.explorer",
        "onCommand:aws.deploySamApplication",
        "onCommand:aws.samcli.detect",
        "onCommand:aws.lambda.createNewSamApp",
        "onDebugInitialConfigurations",
        "onCommand:aws.viewLogs",
        "onCommand:aws.quickStart",
        "onCommand:aws.help",
        "onCommand:aws.github",
        "onCommand:aws.previewStateMachine",
        "onCommand:aws.stepfunctions.createStateMachineFromTemplate",
        "onCommand:aws.stepfunctions.publishStateMachine",
        "onView:aws.cdk.explorer",
        "onCommand:aws.refreshCdkExplorer",
        "onCommand:aws.aboutToolkit",
        "onCommand:aws.cloudWatchLogs.viewLogStream",
        "onLanguage:asl",
        "onLanguage:asl-yaml",
        "onLanguage:ssm-json",
        "onLanguage:ssm-yaml",
        "onCommand:aws.ssmDocument.createLocalDocument",
        "onCommand:aws.ssmDocument.openLocalDocument",
        "onCommand:aws.ssmDocument.openLocalDocumentJson",
        "onCommand:aws.ssmDocument.openLocalDocumentYaml",
        "onCommand:aws.ssmDocument.deleteDocument",
        "onCommand:aws.ssmDocument.publishDocument",
        "onCommand:aws.ssmDocument.updateDocumentVersion",
        "onLanguage:javascript",
        "onLanguage:python",
        "onLanguage:csharp",
        "onLanguage:yaml"
    ],
    "main": "./extensionMain",
    "contributes": {
        "configuration": {
            "type": "object",
            "title": "%AWS.configuration.title%",
            "properties": {
                "aws.profile": {
                    "type": "string",
                    "default": "",
                    "description": "%AWS.configuration.profileDescription%"
                },
                "aws.onDefaultRegionMissing": {
                    "type": "string",
                    "default": "prompt",
                    "markdownDescription": "%AWS.configuration.description.onDefaultRegionMissing%"
                },
                "aws.s3.maxItemsPerPage": {
                    "type": "number",
                    "default": 300,
                    "minimum": 3,
                    "maximum": 1000,
                    "markdownDescription": "%AWS.configuration.description.s3.maxItemsPerPage%"
                },
                "aws.samcli.location": {
                    "type": "string",
                    "scope": "machine",
                    "default": "",
                    "markdownDescription": "%AWS.configuration.description.samcli.location%"
                },
                "aws.samcli.debug.attach.timeout.millis": {
                    "type": "number",
                    "default": 30000,
                    "markdownDescription": "%AWS.configuration.description.samcli.debug.attach.timeout%"
                },
                "aws.cdk.explorer.enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "%AWS.configuration.description.cdk.explorer.enabled%"
                },
                "aws.logLevel": {
                    "type": "string",
                    "default": "info",
                    "enum": [
                        "error",
                        "warn",
                        "info",
                        "verbose",
                        "debug"
                    ],
                    "enumDescriptions": [
                        "Errors Only",
                        "Errors and Warnings",
                        "Errors, Warnings, and Info",
                        "Errors, Warnings, Info, and Verbose",
                        "Errors, Warnings, Info, Verbose, and Debug"
                    ],
                    "markdownDescription": "%AWS.configuration.description.logLevel%"
                },
                "aws.telemetry": {
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "%AWS.configuration.description.telemetry%"
                },
                "aws.stepfunctions.asl.format.enable": {
                    "type": "boolean",
                    "scope": "window",
                    "default": true,
                    "description": "%AWS.stepFunctions.asl.format.enable.desc%"
                },
                "aws.stepfunctions.asl.maxItemsComputed": {
                    "type": "number",
                    "default": 5000,
                    "description": "%AWS.stepFunctions.asl.maxItemsComputed.desc%"
                },
                "aws.ssmDocument.ssm.maxItemsComputed": {
                    "type": "number",
                    "default": 5000,
                    "description": "%AWS.ssmDocument.ssm.maxItemsComputed.desc%"
                },
                "aws.cloudwatchLogs.limit": {
                    "type": "number",
                    "default": 10000,
                    "description": "%aws.cloudWatchLogs.limit.desc%",
                    "maximum": 10000
                }
            }
        },
        "debuggers": [
            {
                "type": "aws-sam",
                "label": "%AWS.configuration.description.awssam.debug.label%",
                "configurationAttributes": {
                    "direct-invoke": {
                        "$schema": "http://json-schema.org/draft-07/schema#",
                        "title": "AwsSamDebuggerConfiguration",
                        "additionalProperties": false,
                        "properties": {
                            "aws": {
                                "title": "AWS Connection",
                                "description": "%AWS.configuration.description.awssam.debug.aws%",
                                "properties": {
                                    "credentials": {
                                        "description": "%AWS.configuration.description.awssam.debug.credentials%",
                                        "type": "string"
                                    },
                                    "region": {
                                        "description": "%AWS.configuration.description.awssam.debug.region%",
                                        "type": "string"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object"
                            },
                            "invokeTarget": {
                                "oneOf": [
                                    {
                                        "title": "Template Target Properties",
                                        "description": "%AWS.configuration.description.awssam.debug.invokeTarget%",
                                        "properties": {
                                            "templatePath": {
                                                "description": "%AWS.configuration.description.awssam.debug.templatePath%",
                                                "type": "string"
                                            },
                                            "logicalId": {
                                                "description": "%AWS.configuration.description.awssam.debug.logicalId%",
                                                "type": "string"
                                            },
                                            "target": {
                                                "description": "%AWS.configuration.description.awssam.debug.target%",
                                                "type": "string",
                                                "enum": [
                                                    "template"
                                                ]
                                            }
                                        },
                                        "additionalProperties": false,
                                        "required": [
                                            "templatePath",
                                            "logicalId",
                                            "target"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "title": "Code Target Properties",
                                        "description": "%AWS.configuration.description.awssam.debug.invokeTarget%",
                                        "properties": {
                                            "lambdaHandler": {
                                                "description": "%AWS.configuration.description.awssam.debug.lambdaHandler%",
                                                "type": "string"
                                            },
                                            "projectRoot": {
                                                "description": "%AWS.configuration.description.awssam.debug.projectRoot%",
                                                "type": "string"
                                            },
                                            "target": {
                                                "description": "%AWS.configuration.description.awssam.debug.target%",
                                                "type": "string",
                                                "enum": [
                                                    "code"
                                                ]
                                            }
                                        },
                                        "additionalProperties": false,
                                        "required": [
                                            "lambdaHandler",
                                            "projectRoot",
                                            "target"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "title": "API Target Properties",
                                        "description": "%AWS.configuration.description.awssam.debug.invokeTarget%",
                                        "properties": {
                                            "templatePath": {
                                                "description": "%AWS.configuration.description.awssam.debug.templatePath%",
                                                "type": "string"
                                            },
                                            "logicalId": {
                                                "description": "%AWS.configuration.description.awssam.debug.logicalId%",
                                                "type": "string"
                                            },
                                            "target": {
                                                "description": "%AWS.configuration.description.awssam.debug.target%",
                                                "type": "string",
                                                "enum": [
                                                    "api"
                                                ]
                                            }
                                        },
                                        "additionalProperties": false,
                                        "required": [
                                            "templatePath",
                                            "logicalId",
                                            "target"
                                        ],
                                        "type": "object"
                                    }
                                ]
                            },
                            "lambda": {
                                "title": "Lambda Properties",
                                "description": "%AWS.configuration.description.awssam.debug.lambda%",
                                "properties": {
                                    "environmentVariables": {
                                        "description": "%AWS.configuration.description.awssam.debug.envvars%",
                                        "additionalProperties": {
                                            "type": [
                                                "string"
                                            ]
                                        },
                                        "type": "object"
                                    },
                                    "payload": {
                                        "description": "%AWS.configuration.description.awssam.debug.event%",
                                        "properties": {
                                            "json": {
                                                "description": "%AWS.configuration.description.awssam.debug.event.json%",
                                                "type": "object"
                                            },
                                            "path": {
                                                "description": "%AWS.configuration.description.awssam.debug.event.path%",
                                                "type": "string"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object"
                                    },
                                    "memoryMb": {
                                        "description": "%AWS.configuration.description.awssam.debug.memoryMb%",
                                        "type": "number"
                                    },
                                    "runtime": {
                                        "description": "%AWS.configuration.description.awssam.debug.runtime%",
                                        "type": "string"
                                    },
                                    "timeoutSec": {
                                        "description": "%AWS.configuration.description.awssam.debug.timeout%",
                                        "type": "number"
                                    },
                                    "pathMappings": {
                                        "type:": "array",
                                        "items": {
                                            "title": "Path Mapping",
                                            "type": "object",
                                            "properties": {
                                                "localRoot": {
                                                    "type": "string"
                                                },
                                                "remoteRoot": {
                                                    "type": "string"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "required": [
                                                "localRoot",
                                                "remoteRoot"
                                            ]
                                        }
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object"
                            },
                            "sam": {
                                "title": "SAM CLI Properties",
                                "description": "%AWS.configuration.description.awssam.debug.sam%",
                                "properties": {
                                    "buildArguments": {
                                        "description": "%AWS.configuration.description.awssam.debug.buildArguments%",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "containerBuild": {
                                        "description": "%AWS.configuration.description.awssam.debug.containerBuild%",
                                        "type": "boolean"
                                    },
                                    "dockerNetwork": {
                                        "description": "%AWS.configuration.description.awssam.debug.dockerNetwork%",
                                        "type": "string"
                                    },
                                    "localArguments": {
                                        "description": "%AWS.configuration.description.awssam.debug.localArguments%",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "skipNewImageCheck": {
                                        "description": "%AWS.configuration.description.awssam.debug.skipNewImageCheck%",
                                        "type": "boolean"
                                    },
                                    "template": {
                                        "description": "%AWS.configuration.description.awssam.debug.template%",
                                        "properties": {
                                            "parameters": {
                                                "description": "%AWS.configuration.description.awssam.debug.templateParameters%",
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "number"
                                                    ]
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object",
                                        "additionalProperties": false
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object"
                            },
                            "api": {
                                "title": "API Gateway Properties",
                                "description": "%AWS.configuration.description.awssam.debug.api%",
                                "properties": {
                                    "path": {
                                        "description": "%AWS.configuration.description.awssam.debug.api.path%",
                                        "type": "string"
                                    },
                                    "httpMethod": {
                                        "description": "%AWS.configuration.description.awssam.debug.api.httpMethod%",
                                        "type": "string",
                                        "enum": [
                                            "delete",
                                            "get",
                                            "head",
                                            "options",
                                            "patch",
                                            "post",
                                            "put"
                                        ]
                                    },
                                    "payload": {
                                        "description": "%AWS.configuration.description.awssam.debug.event%",
                                        "properties": {
                                            "json": {
                                                "description": "%AWS.configuration.description.awssam.debug.event.json%",
                                                "type": "object"
                                            },
                                            "path": {
                                                "description": "%AWS.configuration.description.awssam.debug.event.path%",
                                                "type": "string"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object"
                                    },
                                    "headers": {
                                        "description": "%AWS.configuration.description.awssam.debug.api.headers%",
                                        "type": "object",
                                        "additionalProperties": {
                                            "type": "string"
                                        }
                                    },
                                    "querystring": {
                                        "description": "%AWS.configuration.description.awssam.debug.api.queryString%",
                                        "type": "string"
                                    },
                                    "stageVariables": {
                                        "description": "%AWS.configuration.description.awssam.debug.api.stageVariables%",
                                        "type": "object",
                                        "additionalProperties": {
                                            "type": "string"
                                        }
                                    },
                                    "clientCertificateId": {
                                        "description": "%AWS.configuration.description.awssam.debug.api.clientCertId%",
                                        "type": "string"
                                    }
                                },
                                "additionalProperties": false,
                                "required": [
                                    "path",
                                    "httpMethod"
                                ],
                                "type": "object"
                            }
                        },
                        "required": [
                            "invokeTarget"
                        ],
                        "type": "object"
                    }
                },
                "configurationSnippets": [
                    {
                        "label": "%AWS.configuration.description.awssam.debug.snippets.lambdaCode.label%",
                        "description": "%AWS.configuration.description.awssam.debug.snippets.lambdaCode.description%",
                        "body": {
                            "type": "aws-sam",
                            "request": "direct-invoke",
                            "name": "${3:Invoke Lambda}",
                            "invokeTarget": {
                                "target": "code",
                                "lambdaHandler": "${1:Function Handler}",
                                "projectRoot": "^\"\\${workspaceFolder}\""
                            },
                            "lambda": {
                                "runtime": "${2:Lambda Runtime}",
                                "payload": {
                                    "json": {}
                                }
                            }
                        }
                    },
                    {
                        "label": "%AWS.configuration.description.awssam.debug.snippets.lambdaTemplate.label%",
                        "description": "%AWS.configuration.description.awssam.debug.snippets.lambdaTemplate.description%",
                        "body": {
                            "type": "aws-sam",
                            "request": "direct-invoke",
                            "name": "${3:Invoke Lambda}",
                            "invokeTarget": {
                                "target": "template",
                                "templatePath": "${1:Template Location}",
                                "logicalId": "${2:Function Logical ID}"
                            },
                            "lambda": {
                                "payload": {
                                    "json": {}
                                }
                            }
                        }
                    },
                    {
                        "label": "%AWS.configuration.description.awssam.debug.snippets.api.label%",
                        "description": "%AWS.configuration.description.awssam.debug.snippets.api.description%",
                        "body": {
                            "type": "aws-sam",
                            "request": "direct-invoke",
                            "name": "${5:Invoke Lambda with API Gateway}",
                            "invokeTarget": {
                                "target": "api",
                                "templatePath": "${1:Template Location}",
                                "logicalId": "${2:Function Logical ID}"
                            },
                            "api": {
                                "path": "${3:Path}",
                                "httpMethod": "${4:Method}",
                                "payload": {
                                    "json": {}
                                }
                            }
                        }
                    }
                ]
            }
        ],
        "viewsContainers": {
            "activitybar": [
                {
                    "id": "aws-explorer",
                    "title": "%AWS.title%",
                    "icon": "media/aws-logo.svg"
                }
            ]
        },
        "views": {
            "aws-explorer": [
                {
                    "id": "aws.explorer",
                    "name": "%AWS.lambda.explorerTitle%"
                }
            ],
            "explorer": [
                {
                    "id": "aws.cdk.explorer",
                    "name": "%AWS.cdk.explorerTitle%",
                    "when": "config.aws.cdk.explorer.enabled"
                }
            ]
        },
        "menus": {
            "commandPalette": [
                {
                    "command": "aws.apig.copyUrl",
                    "when": "false"
                },
                {
                    "command": "aws.apig.invokeRemoteRestApi",
                    "when": "false"
                },
                {
                    "command": "aws.deleteCloudFormation",
                    "when": "false"
                },
                {
                    "command": "aws.downloadStateMachineDefinition",
                    "when": "false"
                },
                {
                    "command": "aws.ecr.createRepository",
                    "when": "false"
                },
                {
                    "command": "aws.executeStateMachine",
                    "when": "false"
                },
                {
                    "command": "aws.copyArn",
                    "when": "false"
                },
                {
                    "command": "aws.copyName",
                    "when": "false"
                },
                {
                    "command": "aws.downloadSchemaItemCode",
                    "when": "false"
                },
                {
                    "command": "aws.deleteLambda",
                    "when": "false"
                },
                {
                    "command": "aws.importLambda",
                    "when": "false"
                },
                {
                    "command": "aws.uploadLambda",
                    "when": "false"
                },
                {
                    "command": "aws.invokeLambda",
                    "when": "false"
                },
                {
                    "command": "aws.viewSchemaItem",
                    "when": "false"
                },
                {
                    "command": "aws.searchSchema",
                    "when": "false"
                },
                {
                    "command": "aws.searchSchemaPerRegistry",
                    "when": "false"
                },
                {
                    "command": "aws.refreshAwsExplorer",
                    "when": "false"
                },
                {
                    "command": "aws.refreshCdkExplorer",
                    "when": "false"
                },
                {
                    "command": "aws.showErrorDetails",
                    "when": "false"
                },
                {
                    "command": "aws.ssmDocument.openLocalDocument",
                    "when": "false"
                },
                {
                    "command": "aws.ssmDocument.openLocalDocumentJson",
                    "when": "false"
                },
                {
                    "command": "aws.ssmDocument.openLocalDocumentYaml",
                    "when": "false"
                },
                {
                    "command": "aws.ssmDocument.deleteDocument",
                    "when": "false"
                },
                {
                    "command": "aws.ssmDocument.updateDocumentVersion",
                    "when": "false"
                },
                {
                    "command": "aws.copyLogStreamName",
                    "when": "resourceScheme == awsCloudWatchLogs && !isCloud9"
                },
                {
                    "command": "aws.saveCurrentLogStreamContent",
                    "when": "resourceScheme == awsCloudWatchLogs && !isCloud9"
                },
                {
                    "command": "aws.cloudWatchLogs.viewLogStream",
                    "when": "false"
                },
                {
                    "command": "aws.ecr.deleteRepository",
                    "when": "false"
                },
                {
                    "command": "aws.ecr.copyTagUri",
                    "when": "false"
                },
                {
                    "command": "aws.ecr.copyRepositoryUri",
                    "when": "false"
                },
                {
                    "command": "aws.ecr.deleteTag",
                    "when": "false"
                },
                {
                    "command": "aws.s3.copyPath",
                    "when": "false"
                },
                {
                    "command": "aws.s3.createBucket",
                    "when": "false"
                },
                {
                    "command": "aws.s3.createFolder",
                    "when": "false"
                },
                {
                    "command": "aws.s3.deleteBucket",
                    "when": "false"
                },
                {
                    "command": "aws.s3.deleteFile",
                    "when": "false"
                },
                {
                    "command": "aws.s3.downloadFileAs",
                    "when": "false"
                },
                {
                    "command": "aws.s3.uploadFile",
                    "when": "false"
                },
                {
                    "command": "aws.s3.uploadFileToParent",
                    "when": "false"
                },
                {
                    "command": "aws.stepfunctions.createStateMachineFromTemplate",
                    "when": "!isCloud9"
                },
                {
                    "command": "aws.stepfunctions.publishStateMachine",
                    "when": "!isCloud9"
                },
                {
                    "command": "aws.ssmDocument.createLocalDocument",
                    "when": "!isCloud9"
                },
                {
                    "command": "aws.ssmDocument.publishDocument",
                    "when": "!isCloud9"
                },
                {
                    "command": "aws.previewStateMachine",
                    "when": "!isCloud9"
                },
                {
                    "command": "aws.cdk.help",
                    "when": "!isCloud9"
                }
            ],
            "editor/title": [
                {
                    "command": "aws.previewStateMachine",
                    "when": "(editorLangId == asl || editorLangId == asl-yaml) && !isCloud9",
                    "group": "navigation"
                },
                {
                    "command": "aws.saveCurrentLogStreamContent",
                    "when": "resourceScheme == awsCloudWatchLogs && !isCloud9",
                    "group": "navigation"
                },
                {
                    "command": "aws.ssmDocument.publishDocument",
                    "when": "editorLangId =~ /^(ssm-yaml|ssm-json)$/",
                    "group": "navigation"
                }
            ],
            "editor/title/context": [
                {
                    "command": "aws.copyLogStreamName",
                    "when": "resourceScheme == awsCloudWatchLogs && !isCloud9",
                    "group": "1_cutcopypaste@1"
                }
            ],
            "view/title": [
                {
                    "command": "aws.submitFeedback",
                    "when": "view == aws.explorer",
                    "group": "navigation@6"
                },
                {
                    "command": "aws.refreshAwsExplorer",
                    "when": "view == aws.explorer",
                    "group": "navigation@5"
                },
                {
                    "command": "aws.login",
                    "when": "view == aws.explorer",
                    "group": "1_account@1"
                },
                {
                    "command": "aws.showRegion",
                    "when": "view == aws.explorer",
                    "group": "2_region@1"
                },
                {
                    "command": "aws.hideRegion",
                    "when": "view == aws.explorer",
                    "group": "2_region@2"
                },
                {
                    "command": "aws.lambda.createNewSamApp",
                    "when": "view == aws.explorer",
                    "group": "3_lambda@1"
                },
                {
                    "command": "aws.deploySamApplication",
                    "when": "view == aws.explorer",
                    "group": "3_lambda@2"
                },
                {
                    "command": "aws.quickStart",
                    "when": "view == aws.explorer",
                    "group": "4_quickStart@1"
                },
                {
                    "command": "aws.help",
                    "when": "view == aws.explorer",
                    "group": "y_externalLinks@1"
                },
                {
                    "command": "aws.github",
                    "when": "view == aws.explorer",
                    "group": "y_externalLinks@2"
                },
                {
                    "command": "aws.createIssueOnGitHub",
                    "when": "view == aws.explorer",
                    "group": "y_externalLinks@3"
                },
                {
                    "command": "aws.submitFeedback",
                    "when": "view == aws.explorer",
                    "group": "y_externalLinks@4"
                },
                {
                    "command": "aws.aboutToolkit",
                    "when": "view == aws.explorer",
                    "group": "z_about@1"
                },
                {
                    "command": "aws.refreshCdkExplorer",
                    "when": "view == aws.cdk.explorer",
                    "group": "navigation@5"
                },
                {
                    "command": "aws.cdk.help",
                    "when": "view == aws.cdk.explorer",
                    "group": "z_externalLinks@1"
                },
                {
                    "command": "aws.createIssueOnGitHub",
                    "when": "view == aws.cdk.explorer",
                    "group": "z_externalLinks@2"
                },
                {
                    "command": "aws.submitFeedback",
                    "when": "view == aws.cdk.explorer",
                    "group": "z_externalLinks@3"
                }
            ],
            "view/item/context": [
                {
                    "command": "aws.apig.invokeRemoteRestApi",
                    "when": "view == aws.explorer && viewItem =~ /^(awsApiGatewayNode)$/",
                    "group": "0@1"
                },
                {
                    "command": "aws.ecr.createRepository",
                    "when": "view == aws.explorer && viewItem == awsEcrNode",
                    "group": "inline@1"
                },
                {
                    "command": "aws.s3.downloadFileAs",
                    "when": "view == aws.explorer && viewItem == awsS3FileNode",
                    "group": "inline@1"
                },
                {
                    "command": "aws.s3.createBucket",
                    "when": "view == aws.explorer && viewItem == awsS3Node",
                    "group": "inline@1"
                },
                {
                    "command": "aws.s3.createFolder",
                    "when": "view == aws.explorer && viewItem =~ /^(awsS3BucketNode|awsS3FolderNode)$/",
                    "group": "inline@1"
                },
                {
                    "command": "aws.ssmDocument.openLocalDocument",
                    "when": "view == aws.explorer && viewItem =~ /^(awsDocumentItemNode|awsDocumentItemNodeWriteable)$/",
                    "group": "inline@1"
                },
                {
                    "command": "aws.s3.uploadFile",
                    "when": "view == aws.explorer && viewItem =~ /^(awsS3BucketNode|awsS3FolderNode)$/",
                    "group": "inline@2"
                },
                {
                    "command": "aws.lambda.createNewSamApp",
                    "when": "view == aws.explorer && viewItem == awsLambdaNode",
                    "group": "0@1"
                },
                {
                    "command": "aws.deploySamApplication",
                    "when": "view == aws.explorer && viewItem == awsLambdaNode || viewItem == awsRegionNode || viewItem == awsCloudFormationRootNode",
                    "group": "1@1"
                },
                {
                    "command": "aws.ecr.copyTagUri",
                    "when": "view == aws.explorer && viewItem == awsEcrTagNode",
                    "group": "2@1"
                },
                {
                    "command": "aws.ecr.deleteTag",
                    "when": "view == aws.explorer && viewItem == awsEcrTagNode",
                    "group": "3@1"
                },
                {
                    "command": "aws.ecr.copyRepositoryUri",
                    "when": "view == aws.explorer && viewItem == awsEcrRepositoryNode",
                    "group": "2@1"
                },
                {
                    "command": "aws.ecr.createRepository",
                    "when": "view == aws.explorer && viewItem == awsEcrNode",
                    "group": "0@1"
                },
                {
                    "command": "aws.ecr.deleteRepository",
                    "when": "view == aws.explorer && viewItem == awsEcrRepositoryNode",
                    "group": "3@1"
                },
                {
                    "command": "aws.invokeLambda",
                    "when": "view == aws.explorer && viewItem =~ /^(awsRegionFunctionNode|awsRegionFunctionNodeImportable|awsCloudFormationFunctionNode)$/",
                    "group": "0@1"
                },
                {
                    "command": "aws.importLambda",
                    "when": "view == aws.explorer && viewItem =~ /^(awsRegionFunctionNode|awsRegionFunctionNodeImportable)$/",
                    "group": "0@2"
                },
                {
                    "command": "aws.uploadLambda",
                    "when": "view == aws.explorer && viewItem =~ /^(awsRegionFunctionNode|awsRegionFunctionNodeImportable)$/",
                    "group": "1@1"
                },
                {
                    "command": "aws.deleteLambda",
                    "when": "view == aws.explorer && viewItem =~ /^(awsRegionFunctionNode|awsRegionFunctionNodeImportable)$/",
                    "group": "4@1"
                },
                {
                    "command": "aws.deleteCloudFormation",
                    "when": "view == aws.explorer && viewItem == awsCloudFormationNode",
                    "group": "3@5"
                },
                {
                    "command": "aws.searchSchema",
                    "when": "view == aws.explorer && viewItem == awsSchemasNode && !isCloud9",
                    "group": "0@1"
                },
                {
                    "command": "aws.searchSchemaPerRegistry",
                    "when": "view == aws.explorer && viewItem == awsRegistryItemNode && !isCloud9",
                    "group": "0@1"
                },
                {
                    "command": "aws.viewSchemaItem",
                    "when": "view == aws.explorer && viewItem == awsSchemaItemNode && !isCloud9",
                    "group": "0@1"
                },
                {
                    "command": "aws.downloadStateMachineDefinition",
                    "when": "view == aws.explorer && viewItem == awsStateMachineNode && !isCloud9",
                    "group": "0@1"
                },
                {
                    "command": "aws.executeStateMachine",
                    "when": "view == aws.explorer && viewItem == awsStateMachineNode && !isCloud9",
                    "group": "0@2"
                },
                {
                    "command": "aws.s3.createBucket",
                    "when": "view == aws.explorer && viewItem == awsS3Node",
                    "group": "0@1"
                },
                {
                    "command": "aws.s3.downloadFileAs",
                    "when": "view == aws.explorer && viewItem == awsS3FileNode",
                    "group": "0@1"
                },
                {
                    "command": "aws.s3.uploadFile",
                    "when": "view == aws.explorer && viewItem =~ /^(awsS3BucketNode|awsS3FolderNode)$/",
                    "group": "0@1"
                },
                {
                    "command": "aws.s3.uploadFileToParent",
                    "when": "view == aws.explorer && viewItem == awsS3FileNode",
                    "group": "1@1"
                },
                {
                    "command": "aws.s3.createFolder",
                    "when": "view == aws.explorer && viewItem =~ /^(awsS3BucketNode|awsS3FolderNode)$/",
                    "group": "1@1"
                },
                {
                    "command": "aws.copyName",
                    "when": "view == aws.explorer && viewItem =~ /^(awsRegionFunctionNode|awsRegionFunctionNodeImportable|awsCloudFormationFunctionNode|awsStateMachineNode|awsCloudFormationNode|awsS3BucketNode|awsS3FolderNode|awsS3FileNode|awsApiGatewayNode)$/",
                    "group": "2@1"
                },
                {
                    "command": "aws.copyArn",
                    "when": "view == aws.explorer && viewItem =~ /^(awsRegionFunctionNode|awsRegionFunctionNodeImportable|awsCloudFormationFunctionNode|awsStateMachineNode|awsCloudFormationNode|awsCloudWatchLogNode|awsS3BucketNode|awsS3FolderNode|awsS3FileNode|awsApiGatewayNode|awsEcrRepositoryNode)$/",
                    "group": "2@2"
                },
                {
                    "command": "aws.apig.copyUrl",
                    "when": "view == aws.explorer && viewItem =~ /^(awsApiGatewayNode)$/",
                    "group": "2@0"
                },
                {
                    "command": "aws.s3.copyPath",
                    "when": "view == aws.explorer && viewItem =~ /^(awsS3FolderNode|awsS3FileNode)$/",
                    "group": "2@3"
                },
                {
                    "command": "aws.s3.deleteBucket",
                    "when": "view == aws.explorer && viewItem == awsS3BucketNode",
                    "group": "3@1"
                },
                {
                    "command": "aws.s3.deleteFile",
                    "when": "view == aws.explorer && viewItem == awsS3FileNode",
                    "group": "3@1"
                },
                {
                    "command": "aws.downloadSchemaItemCode",
                    "when": "view == aws.explorer && viewItem == awsSchemaItemNode && !isCloud9",
                    "group": "1@1"
                },
                {
                    "command": "aws.showErrorDetails",
                    "when": "view == aws.explorer && viewItem == awsErrorNode",
                    "group": "0@5"
                },
                {
                    "command": "aws.hideRegion",
                    "group": "0@1",
                    "when": "view == aws.explorer && viewItem == awsRegionNode"
                },
                {
                    "command": "aws.cloudWatchLogs.viewLogStream",
                    "group": "0@1",
                    "when": "view == aws.explorer && viewItem == awsCloudWatchLogNode && !isCloud9"
                },
                {
                    "command": "aws.ssmDocument.openLocalDocumentYaml",
                    "group": "0@1",
                    "when": "view == aws.explorer && viewItem =~ /^(awsDocumentItemNode|awsDocumentItemNodeWriteable)$/"
                },
                {
                    "command": "aws.ssmDocument.openLocalDocumentJson",
                    "group": "0@2",
                    "when": "view == aws.explorer && viewItem =~ /^(awsDocumentItemNode|awsDocumentItemNodeWriteable)$/"
                },
                {
                    "command": "aws.ssmDocument.updateDocumentVersion",
                    "group": "2@1",
                    "when": "view == aws.explorer && viewItem == awsDocumentItemNodeWriteable"
                },
                {
                    "command": "aws.ssmDocument.deleteDocument",
                    "group": "3@2",
                    "when": "view == aws.explorer && viewItem == awsDocumentItemNodeWriteable"
                }
            ]
        },
        "commands": [
            {
                "command": "aws.apig.copyUrl",
                "title": "%AWS.command.apig.copyUrl%",
                "category": "AWS"
            },
            {
                "command": "aws.apig.invokeRemoteRestApi",
                "title": "%AWS.command.apig.invokeRemoteRestApi%",
                "category": "AWS"
            },
            {
                "command": "aws.lambda.createNewSamApp",
                "title": "%AWS.command.createNewSamApp%",
                "category": "AWS"
            },
            {
                "command": "aws.login",
                "title": "%AWS.command.login%",
                "category": "AWS"
            },
            {
                "command": "aws.credential.profile.create",
                "title": "%AWS.command.credential.profile.create%",
                "category": "AWS"
            },
            {
                "command": "aws.logout",
                "title": "%AWS.command.logout%",
                "category": "AWS"
            },
            {
                "command": "aws.createIssueOnGitHub",
                "title": "%AWS.command.createIssueOnGitHub%",
                "category": "AWS"
            },
            {
                "command": "aws.cdk.help",
                "title": "%AWS.command.cdk.help%",
                "category": "AWS"
            },
            {
                "command": "aws.ecr.copyTagUri",
                "title": "%AWS.command.ecr.copyTagUri%",
                "category": "AWS"
            },
            {
                "command": "aws.ecr.deleteTag",
                "title": "%AWS.command.ecr.deleteTag%",
                "category": "AWS"
            },
            {
                "command": "aws.ecr.copyRepositoryUri",
                "title": "%AWS.command.ecr.copyRepositoryUri%",
                "category": "AWS"
            },
            {
                "command": "aws.ecr.createRepository",
                "title": "%AWS.command.ecr.createRepository%",
                "category": "AWS",
                "icon": "$(add)"
            },
            {
                "command": "aws.ecr.deleteRepository",
                "title": "%AWS.command.ecr.deleteRepository%",
                "category": "AWS"
            },
            {
                "command": "aws.showRegion",
                "title": "%AWS.command.showRegion%",
                "category": "AWS"
            },
            {
                "command": "aws.hideRegion",
                "title": "%AWS.command.hideRegion%",
                "category": "AWS"
            },
            {
                "command": "aws.s3.copyPath",
                "title": "%AWS.command.s3.copyPath%",
                "category": "AWS"
            },
            {
                "command": "aws.s3.downloadFileAs",
                "title": "%AWS.command.s3.downloadFileAs%",
                "category": "AWS",
                "icon": "$(cloud-download)"
            },
            {
                "command": "aws.s3.uploadFile",
                "title": "%AWS.command.s3.uploadFile%",
                "category": "AWS",
                "icon": "$(cloud-upload)"
            },
            {
                "command": "aws.s3.uploadFileToParent",
                "title": "%AWS.command.s3.uploadFileToParent%",
                "category": "AWS"
            },
            {
                "command": "aws.s3.createFolder",
                "title": "%AWS.command.s3.createFolder%",
                "category": "AWS",
                "icon": "$(new-folder)"
            },
            {
                "command": "aws.s3.createBucket",
                "title": "%AWS.command.s3.createBucket%",
                "category": "AWS",
                "icon": {
                    "light": "resources/light/s3/create-bucket.svg",
                    "dark": "resources/dark/s3/create-bucket.svg"
                }
            },
            {
                "command": "aws.s3.deleteBucket",
                "title": "%AWS.generic.promptDelete%",
                "category": "AWS"
            },
            {
                "command": "aws.s3.deleteFile",
                "title": "%AWS.generic.promptDelete%",
                "category": "AWS"
            },
            {
                "command": "aws.invokeLambda",
                "title": "%AWS.command.invokeLambda%",
                "category": "AWS"
            },
            {
                "command": "aws.importLambda",
                "title": "%AWS.command.importLambda%",
                "category": "AWS",
                "enablement": "viewItem == awsRegionFunctionNodeImportable"
            },
            {
                "command": "aws.uploadLambda",
                "title": "%AWS.command.uploadLambda%",
                "category": "AWS",
                "enablement": "viewItem =~ /^(awsRegionFunctionNode|awsRegionFunctionNodeImportable)$/"
            },
            {
                "command": "aws.deleteLambda",
                "title": "%AWS.generic.promptDelete%",
                "category": "AWS"
            },
            {
                "command": "aws.deploySamApplication",
                "title": "%AWS.command.deploySamApplication%",
                "category": "AWS"
            },
            {
                "command": "aws.submitFeedback",
                "title": "%AWS.command.submitFeedback%",
                "category": "AWS",
                "icon": {
                    "dark": "third-party/resources/from-vscode/dark/feedback.svg",
                    "light": "third-party/resources/from-vscode/light/feedback.svg"
                }
            },
            {
                "command": "aws.refreshAwsExplorer",
                "title": "%AWS.command.refreshAwsExplorer%",
                "category": "AWS",
                "icon": {
                    "dark": "third-party/resources/from-vscode-icons/dark/refresh.svg",
                    "light": "third-party/resources/from-vscode-icons/light/refresh.svg"
                }
            },
            {
                "command": "aws.samcli.detect",
                "title": "%AWS.command.samcli.detect%",
                "category": "AWS"
            },
            {
                "command": "aws.deleteCloudFormation",
                "title": "%AWS.command.deleteCloudFormation%",
                "category": "AWS"
            },
            {
                "command": "aws.downloadStateMachineDefinition",
                "title": "%AWS.command.downloadStateMachineDefinition%",
                "category": "AWS"
            },
            {
                "command": "aws.executeStateMachine",
                "title": "%AWS.command.executeStateMachine%",
                "category": "AWS"
            },
            {
                "command": "aws.copyArn",
                "title": "%AWS.command.copyArn%",
                "category": "AWS"
            },
            {
                "command": "aws.copyName",
                "title": "%AWS.command.copyName%",
                "category": "AWS"
            },
            {
                "command": "aws.viewSchemaItem",
                "title": "%AWS.command.viewSchemaItem%",
                "category": "AWS"
            },
            {
                "command": "aws.searchSchema",
                "title": "%AWS.command.searchSchema%",
                "category": "AWS"
            },
            {
                "command": "aws.searchSchemaPerRegistry",
                "title": "%AWS.command.searchSchemaPerRegistry%",
                "category": "AWS"
            },
            {
                "command": "aws.downloadSchemaItemCode",
                "title": "%AWS.command.downloadSchemaItemCode%",
                "category": "AWS"
            },
            {
                "command": "aws.showErrorDetails",
                "title": "%AWS.command.showErrorDetails%",
                "category": "AWS"
            },
            {
                "command": "aws.viewLogs",
                "title": "%AWS.command.viewLogs%",
                "category": "AWS"
            },
            {
                "command": "aws.help",
                "title": "%AWS.command.help%",
                "category": "AWS"
            },
            {
                "command": "aws.github",
                "title": "%AWS.command.github%",
                "category": "AWS"
            },
            {
                "command": "aws.quickStart",
                "title": "%AWS.command.quickStart%",
                "category": "AWS"
            },
            {
                "command": "aws.refreshCdkExplorer",
                "title": "%AWS.command.refreshCdkExplorer%",
                "category": "AWS",
                "icon": {
                    "dark": "third-party/resources/from-vscode-icons/dark/refresh.svg",
                    "light": "third-party/resources/from-vscode-icons/light/refresh.svg"
                }
            },
            {
                "command": "aws.stepfunctions.createStateMachineFromTemplate",
                "title": "%AWS.command.stepFunctions.createStateMachineFromTemplate%",
                "category": "AWS"
            },
            {
                "command": "aws.stepfunctions.publishStateMachine",
                "title": "%AWS.command.stepFunctions.publishStateMachine%",
                "category": "AWS"
            },
            {
                "command": "aws.previewStateMachine",
                "title": "%AWS.command.stepFunctions.previewStateMachine%",
                "category": "AWS",
                "icon": {
                    "light": "resources/light/stepfunctions/preview.svg",
                    "dark": "resources/dark/stepfunctions/preview.svg"
                }
            },
            {
                "command": "aws.aboutToolkit",
                "title": "%AWS.command.aboutToolkit%",
                "category": "AWS"
            },
            {
                "command": "aws.cloudWatchLogs.viewLogStream",
                "title": "%AWS.command.viewLogStream%",
                "category": "AWS"
            },
            {
                "command": "aws.ssmDocument.createLocalDocument",
                "title": "%AWS.command.ssmDocument.createLocalDocument%",
                "category": "AWS"
            },
            {
                "command": "aws.ssmDocument.openLocalDocument",
                "title": "%AWS.command.ssmDocument.openLocalDocument%",
                "category": "AWS",
                "icon": "$(cloud-download)"
            },
            {
                "command": "aws.ssmDocument.openLocalDocumentJson",
                "title": "%AWS.command.ssmDocument.openLocalDocumentJson%",
                "category": "AWS"
            },
            {
                "command": "aws.ssmDocument.openLocalDocumentYaml",
                "title": "%AWS.command.ssmDocument.openLocalDocumentYaml%",
                "category": "AWS"
            },
            {
                "command": "aws.ssmDocument.deleteDocument",
                "title": "%AWS.command.ssmDocument.deleteDocument%",
                "category": "AWS"
            },
            {
                "command": "aws.ssmDocument.publishDocument",
                "title": "%AWS.command.ssmDocument.publishDocument%",
                "category": "AWS",
                "icon": "$(cloud-upload)"
            },
            {
                "command": "aws.ssmDocument.updateDocumentVersion",
                "title": "%AWS.command.ssmDocument.updateDocumentVersion%",
                "category": "AWS"
            },
            {
                "command": "aws.copyLogStreamName",
                "title": "%AWS.command.copyLogStreamName%",
                "category": "AWS",
                "icon": "$(files)"
            },
            {
                "command": "aws.saveCurrentLogStreamContent",
                "title": "%AWS.command.saveCurrentLogStreamContent%",
                "category": "AWS",
                "icon": "$(save-as)"
            }
        ],
        "jsonValidation": [
            {
                "fileMatch": ".aws/templates.json",
                "url": "./dist/src/templates/templates.json"
            },
            {
                "fileMatch": "*ecs-task-def.json",
                "url": "https://ecs-intellisense.s3-us-west-2.amazonaws.com/task-definition/schema.json"
            }
        ],
        "languages": [
            {
                "id": "asl",
                "extensions": [
                    ".asl.json",
                    ".asl"
                ],
                "aliases": [
                    "Amazon States Language"
                ]
            },
            {
                "id": "asl-yaml",
                "aliases": [
                    "Amazon States Language (YAML)"
                ],
                "extensions": [
                    ".asl.yaml",
                    ".asl.yml"
                ]
            },
            {
                "id": "ssm-json",
                "extensions": [
                    ".ssm.json"
                ],
                "aliases": [
                    "AWS Systems Manager Document (JSON)"
                ]
            },
            {
                "id": "ssm-yaml",
                "extensions": [
                    ".ssm.yaml",
                    ".ssm.yml"
                ],
                "aliases": [
                    "AWS Systems Manager Document (YAML)"
                ]
            }
        ],
        "keybindings": [
            {
                "command": "aws.previewStateMachine",
                "key": "ctrl+shift+v",
                "mac": "cmd+shift+v",
                "when": "editorTextFocus && (editorLangId == asl || editorLangId == asl-yaml) && !isCloud9"
            }
        ],
        "grammars": [
            {
                "language": "asl",
                "scopeName": "source.asl",
                "path": "./syntaxes/ASL.tmLanguage"
            },
            {
                "language": "asl-yaml",
                "scopeName": "source.asl.yaml",
                "path": "./syntaxes/asl-yaml.tmLanguage.json"
            },
            {
                "language": "ssm-json",
                "scopeName": "source.ssmjson",
                "path": "./syntaxes/SSMJSON.tmLanguage"
            },
            {
                "language": "ssm-yaml",
                "scopeName": "source.ssmyaml",
                "path": "./syntaxes/SSMYAML.tmLanguage"
            }
        ],
        "resourceLabelFormatters": [
            {
                "scheme": "awsCloudWatchLogs",
                "formatting": {
                    "label": "${path}",
                    "separator": "\\"
                }
            }
        ]
    },
    "scripts": {
        "vscode:prepublish": "npm run clean && npm run lint && webpack --mode production && npm run buildScripts",
        "bundleDeps": "node ./build-scripts/bundleDeps.js",
        "clean": "node ./build-scripts/clean.js dist",
        "generateNonCodeFiles": "ts-node ./build-scripts/generateNonCodeFiles.ts",
        "reset": "node ./build-scripts/clean.js dist node_modules && npm install",
        "copyNonCodeFiles": "node ./build-scripts/copyNonCodeFiles.js",
        "copyExtensionMain": "node ./build-scripts/copyExtensionMain.js",
        "copyDistFiles": "ts-node ./build-scripts/copyDistFiles.ts",
        "buildScripts": "npm run bundleDeps && npm run copyExtensionMain && npm run copyDistFiles && npm run copyNonCodeFiles && npm run generateNonCodeFiles",
        "compile": "webpack --mode development && npm run buildScripts",
        "recompile": "npm run clean && npm run compile",
        "watch": "npm run buildScripts && tsc -watch -p ./",
        "postinstall": "ts-node ./build-scripts/generateServiceClient.ts && npm run generateTelemetry && npm run generateConfigurationAttributes",
        "testCompile": "tsc -p ./ && npm run buildScripts",
        "test": "npm run testCompile && ts-node ./test-scripts/test.ts",
        "integrationTest": "npm run testCompile && ts-node ./test-scripts/integrationTest.ts",
        "lint": "eslint -c .eslintrc.js --ext .ts .",
        "lintfix": "eslint -c .eslintrc.js --fix --ext .ts .",
        "package": "vsce package",
        "packageDebug": "ts-node ./build-scripts/packageDebug.ts",
        "install-plugin": "vsce package -o aws-toolkit-vscode-test.vsix && code --install-extension aws-toolkit-vscode-test.vsix",
        "generateTelemetry": "node node_modules/@aws-toolkits/telemetry/lib/generateTelemetry.js --extraInput=src/shared/telemetry/vscodeTelemetry.json --output=src/shared/telemetry/telemetry.gen.ts",
        "generateConfigurationAttributes": "ts-node ./build-scripts/generateConfigurationAttributes.ts",
        "newChange": "ts-node ./build-scripts/newChange.ts",
        "createRelease": "ts-node ./build-scripts/createRelease.ts"
    },
    "devDependencies": {
        "@aws-toolkits/telemetry": "0.0.80",
        "@types/adm-zip": "^0.4.32",
        "@types/async-lock": "^1.1.0",
        "@types/bytes": "^3.1.0",
        "@types/cross-spawn": "^6.0.0",
        "@types/fs-extra": "^8.0.1",
        "@types/glob": "^7.1.1",
        "@types/js-yaml": "^3.12.0",
        "@types/lodash": "^4.14.136",
        "@types/lolex": "^5.1.0",
        "@types/marked": "^0.6.5",
        "@types/mime-types": "^2.1.0",
        "@types/mocha": "^7.0.2",
        "@types/node": "^10.14.22",
        "@types/readline-sync": "^1.4.3",
        "@types/request": "^2.47.1",
        "@types/semver": "^5.5.0",
        "@types/sinon": "^7.0.13",
        "@types/tcp-port-used": "^1.0.0",
        "@types/uuid": "^3.4.4",
        "@types/vscode": "1.42.0",
        "@types/xml2js": "^0.4.3",
        "@typescript-eslint/eslint-plugin": "^2.27.0",
        "@typescript-eslint/eslint-plugin-tslint": "^2.27.0",
        "@typescript-eslint/parser": "^2.27.0",
        "circular-dependency-plugin": "^5.2.0",
        "decache": "^4.4.0",
        "eslint": "^6.8.0",
        "eslint-config-prettier": "^6.10.1",
        "eslint-plugin-header": "^3.0.0",
        "eslint-plugin-no-null": "^1.0.2",
        "glob": "^7.1.4",
        "husky": "^2.3.0",
        "istanbul": "^0.4.5",
        "json-schema-to-typescript": "^8.2.0",
        "lolex": "^5.1.0",
        "marked": "^0.7.0",
        "mocha": "^7.1.1",
        "mocha-junit-reporter": "^1.23.3",
        "mocha-multi-reporters": "^1.1.7",
        "prettier": "^2.1.2",
        "pretty-quick": "^3.1.0",
        "readline-sync": "^1.4.9",
        "remap-istanbul": "^0.12.0",
        "sinon": "^7.4.2",
        "source-map-support": "^0.5.19",
        "terser-webpack-plugin": "^4.2.2",
        "ts-loader": "^6.2.0",
        "ts-mockito": "^2.5.0",
        "ts-node": "^9.0.0",
        "tslint": "^6.1.3",
        "umd-compat-loader": "^2.1.2",
        "vsce": "^1.81.1",
        "vscode-nls-dev": "^3.3.1",
        "vscode-test": "^1.4.0",
        "webpack": "^4.41.2",
        "webpack-cli": "^3.3.10"
    },
    "dependencies": {
        "adm-zip": "^0.4.13",
        "amazon-states-language-service": "^1.6.4",
        "async-lock": "^1.1.3",
        "aws-sdk": "^2.581.0",
        "aws-ssm-document-language-service": "^1.0.0",
        "bytes": "^3.1.0",
        "cloudformation-schema-js-yaml": "^1.0.1",
        "cross-spawn": "^6.0.5",
        "fs-extra": "^9.0.1",
        "handlebars": "^4.7.6",
        "immutable": "^4.0.0-rc.12",
        "js-yaml": "^3.13.1",
        "jsonc-parser": "^2.0.2",
        "lodash": "^4.17.19",
        "mime-types": "^2.1.27",
        "moment": "^2.29.1",
        "portfinder": "^1.0.25",
        "request": "^2.88.0",
        "semver": "^5.6.0",
        "sleep-promise": "^8.0.1",
        "strip-ansi": "^5.2.0",
        "tcp-port-used": "^1.0.1",
        "typescript": "^3.7.2",
        "uuid": "^8.3.2",
        "vscode-languageclient": "^6.1.1",
        "vscode-languageserver": "^6.1.1",
        "vscode-languageserver-textdocument": "^1.0.1",
        "vscode-nls": "^4.1.1",
        "vue": "^2.5.16",
        "winston": "^3.2.1",
        "winston-transport": "^4.3.0",
        "xml2js": "^0.4.19",
        "yaml": "^1.9.2"
    },
    "prettier": {
        "printWidth": 120,
        "trailingComma": "es5",
        "tabWidth": 4,
        "singleQuote": true,
        "semi": false,
        "bracketSpacing": true,
        "arrowParens": "avoid",
        "endOfLine": "lf"
    },
    "husky": {
        "hooks": {
            "pre-commit": "(git secrets --register-aws || (echo 'Please install git-secrets https://github.com/awslabs/git-secrets to check for accidentally commited secrets!' && exit 1)) && git secrets --pre_commit_hook -- \"$@\" && pretty-quick --staged"
        }
    }
}
