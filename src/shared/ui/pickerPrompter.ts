/*!
 * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

import * as vscode from 'vscode'

import { WIZARD_BACK } from '../wizards/wizard'
import { QuickInputButton, PrompterButtons } from './buttons'
import { Prompter, PromptResult } from './prompter'
import { applyPrimitives } from '../utilities/collectionUtils'

/** Settings applied when using a QuickPickPrompter in 'filter-box input' mode. */
interface FilterBoxInputSettings<T> {
    /** The label of the new QuickPickItem generated by the user's input. */
    label: string
    /** Parses the user's input into a the desired type. */
    transform: (v: string) => PromptResult<T>
}

// Note: 'placeHolder' and 'onDidSelectItem' are ommited since they do not make since the context of the Prompter
// TODO: remove 'canPickMany' from the omitted properties and implement/test functionality with multiple QuickPick items
/**  Additional options to configure the `QuickPick` beyond the standard API  */
export type ExtendedQuickPickOptions<T> = Omit<
    vscode.QuickPickOptions,
    'canPickMany' | 'placeHolder' | 'onDidSelectItem'
> & {
    title?: string
    value?: string
    step?: number
    placeholder?: string
    totalSteps?: number
    buttons?: PrompterButtons<T>
    /**
     * Setting this option will enable 'filter-box input' mode, allowing the user to create their own QuickInputItem
     * using the filter box as input.
     */
    filterBoxInputSettings?: FilterBoxInputSettings<T>
}

export const DEFAULT_QUICKPICK_OPTIONS: vscode.QuickPickOptions = {
    ignoreFocusOut: true,
}

type QuickPickData<T> = PromptResult<T> | (() => Promise<PromptResult<T>>)
type LabelQuickPickItem<T> = vscode.QuickPickItem & { label: T }

/**
 * Attaches additional information as `data` to a QuickPickItem. Alternatively, `data` can be a function that
 * returns a Promise, evaluated after the user selects the item.
 */
export type DataQuickPickItem<T> = vscode.QuickPickItem & { data: QuickPickData<T> }
export type DataQuickPick<T> = Omit<vscode.QuickPick<DataQuickPickItem<T>>, 'buttons'> & { buttons: PrompterButtons<T> }

export const CUSTOM_USER_INPUT = Symbol()

function isDataQuickPickItem(obj: any): obj is DataQuickPickItem<any> {
    return typeof obj === 'object' && typeof (obj as vscode.QuickPickItem).label === 'string' && 'data' in obj
}

/**
 * Creates a UI element that presents a list of items. Information that should be returned when the user selects an
 * item must be placed in the `data` property of each item. If only the `label` is desired, use
 * {@link createLabelQuickPick} instead.
 *
 * @param items An array or a Promise for items.
 * @param options Customizes the QuickPick and QuickPickPrompter.
 * @returns A {@link QuickPickPrompter}. This can be used directly with the `prompt` method or can be fed into a Wizard.
 */
export function createQuickPick<T>(
    items: DataQuickPickItem<T>[] | Promise<DataQuickPickItem<T>[]>,
    options?: ExtendedQuickPickOptions<T>
): QuickPickPrompter<T> {
    const picker = vscode.window.createQuickPick<DataQuickPickItem<T>>() as DataQuickPick<T>
    options = { ...DEFAULT_QUICKPICK_OPTIONS, ...options }
    applyPrimitives(picker, { ...DEFAULT_QUICKPICK_OPTIONS, ...options })

    const prompter =
        options.filterBoxInputSettings !== undefined
            ? new FilterBoxQuickPickPrompter<T>(picker, options.filterBoxInputSettings)
            : new QuickPickPrompter<T>(picker)

    prompter.loadItems(items)

    return prompter
}

// Note: the generic type used in `createLabelQuickPick` is needed to infer the correct type when using string
// literal types. Otherwise the narrowness of the type would be lost.
/** Creates a QuickPick from normal QuickPickItems, using the `label` as the return value. */
export function createLabelQuickPick<T extends string>(
    items: LabelQuickPickItem<T>[] | Promise<LabelQuickPickItem<T>[]>,
    options?: ExtendedQuickPickOptions<T>
): QuickPickPrompter<T> {
    if (items instanceof Promise) {
        return createQuickPick(
            items.then(items => items.map(item => ({ ...item, data: item.label }))),
            options
        )
    }
    return createQuickPick(
        items.map(item => ({ ...item, data: item.label })),
        options
    )
}

/**
 * Sets up the QuickPick events. Reject is intentionally not used since errors should be handled through
 * control signals, not exceptions.
 */
function promptUser<T>(
    picker: DataQuickPick<T>,
    onDidShowEmitter: vscode.EventEmitter<void>
): Promise<DataQuickPickItem<T>[] | undefined> {
    return new Promise<DataQuickPickItem<T>[] | undefined>(resolve => {
        picker.onDidAccept(() => picker.selectedItems.length > 0 && resolve(Array.from(picker.selectedItems)))
        picker.onDidHide(() => resolve(undefined))
        picker.onDidTriggerButton(button => {
            if (button === vscode.QuickInputButtons.Back) {
                resolve([{ label: '', data: WIZARD_BACK }])
            } else if ((button as QuickInputButton<T>).onClick !== undefined) {
                const response = (button as QuickInputButton<T>).onClick!()
                if (response !== undefined) {
                    resolve([{ label: '', data: response }])
                }
            }
        })
        picker.show()
        onDidShowEmitter.fire()
    }).finally(() => picker.dispose())
}

/**
 * A generic UI element that presents a list of items for the user to select. Wraps around {@link vscode.QuickPick QuickPick}.
 */
export class QuickPickPrompter<T> extends Prompter<T> {
    protected _lastPicked?: DataQuickPickItem<T>
    private onDidShowEmitter: vscode.EventEmitter<void> = new vscode.EventEmitter()
    /** Event that is fired immediately after the prompter is shown. */
    public onDidShow: vscode.Event<void> = this.onDidShowEmitter.event

    public set lastResponse(response: DataQuickPickItem<T> | undefined) {
        if (response === undefined || !isDataQuickPickItem(response)) {
            return
        }

        this.selectItems(response)
    }

    public get lastResponse() {
        return this._lastPicked
    }

    constructor(public readonly quickPick: DataQuickPick<T>) {
        super()
    }

    public setSteps(current: number, total: number): void {
        this.quickPick.step = current
        this.quickPick.totalSteps = total
    }

    protected async promptUser(): Promise<PromptResult<T>> {
        const choices = await promptUser(this.quickPick, this.onDidShowEmitter)
        this.onDidShowEmitter.dispose()

        if (choices === undefined) {
            return choices
        }

        this._lastPicked = choices[0]
        const result = choices[0].data

        return result instanceof Function ? await result() : result
    }

    /**
     * Attempts to set the currently selected items. If no matching items were found, the first item in
     * the QuickPick is selected.
     *
     * @param items The items to look for
     */
    public selectItems(...items: DataQuickPickItem<T>[]): void {
        const selected = new Set(items.map(item => item.label))

        // Note: activeItems refer to the 'highlighted' items in a QuickPick, while selectedItems only
        // changes _after_ the user hits enter or clicks something. For a multi-select QuickPick,
        // selectedItems will change as options are clicked (and not when accepting).
        this.quickPick.activeItems = this.quickPick.items.filter(item => selected.has(item.label))

        if (this.quickPick.activeItems.length === 0) {
            this.quickPick.activeItems = [this.quickPick.items[0]]
        }
    }

    /**
     * Loads items into the QuickPick. Can accept an array or a Promise for items. Promises will cause the
     * QuickPick to become 'busy', disabling user-input until loading is finished. Items are appended to
     * the current set of items. Use `clearItems` prior to loading if this behavior is not desired. The
     * previously selected item will remain selected if it still exists after loading.
     *
     * @param items DataQuickPickItems or a promise for said items
     * @returns A promise that is resolved when loading has finished
     */
    public loadItems(items: Promise<DataQuickPickItem<T>[]> | DataQuickPickItem<T>[]): Promise<void> {
        const picker = this.quickPick

        if (items instanceof Promise) {
            picker.busy = true
            picker.enabled = false

            return items.then(items => {
                const previousSelected = picker.activeItems
                picker.items = picker.items.concat(items)
                this.selectItems(...previousSelected)
                picker.busy = false
                picker.enabled = true
            })
        } else {
            const previousSelected = picker.activeItems
            picker.items = picker.items.concat(items)
            this.selectItems(...previousSelected)
            return Promise.resolve()
        }
    }
}

/**
 * Allows the prompter to accept the QuickPick filter box as input, shown as a QuickPickItem.
 *
 * It is recommended to use `createQuickPick` instead of instantiating this class in isolation.
 *
 * @param label The label of the QuickPickItem that shows the user's input
 * @param transform Required when the expected type is not a string, transforming the input into the expected type or a control signal.
 */
export class FilterBoxQuickPickPrompter<T> extends QuickPickPrompter<T> {
    private onChangeValue?: vscode.Disposable

    public set lastResponse(response: DataQuickPickItem<T> | undefined) {
        if (this.isUserInput(response)) {
            this.quickPick.value = response.description ?? ''
        } else {
            super.lastResponse = response
        }
    }

    constructor(quickPick: DataQuickPick<T>, private readonly settings: FilterBoxInputSettings<T>) {
        super(quickPick)

        this.transform(selection => {
            if ((selection as T | typeof CUSTOM_USER_INPUT) === CUSTOM_USER_INPUT) {
                return settings.transform(quickPick.value) ?? selection
            }
            return selection
        })
    }

    public loadItems(items: Promise<DataQuickPickItem<T>[]> | DataQuickPickItem<T>[]): Promise<void> {
        if (this.onChangeValue) {
            this.onChangeValue.dispose()
        }

        return super.loadItems(items).then(() => this.addFilterBoxInput())
    }

    private addFilterBoxInput(): void {
        const picker = this.quickPick as DataQuickPick<T | symbol>
        const items = picker.items.filter(item => item.data !== CUSTOM_USER_INPUT)
        const { label } = this.settings

        function update(value: string = '') {
            if (value !== '') {
                const customUserInputItem = {
                    label,
                    description: value,
                    alwaysShow: true,
                    data: CUSTOM_USER_INPUT,
                } as DataQuickPickItem<T | symbol>

                picker.items = [customUserInputItem, ...items]
            } else {
                picker.items = items
            }
        }

        this.onChangeValue = picker.onDidChangeValue(update)
        update(picker.value)
    }

    private isUserInput(picked: any): picked is DataQuickPickItem<symbol> {
        return picked !== undefined && picked.data === CUSTOM_USER_INPUT
    }
}
