/*!
 * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

import * as vscode from 'vscode'

/**
 * This file emits the App.java file contents from the stock SAM CLI app for dotnet, as well as
 * the corresponding DocumentSymbols generated by VS Code.
 */

export function getDocumentSymbols(): vscode.DocumentSymbol[] {
    const packageSymbol: vscode.DocumentSymbol = new vscode.DocumentSymbol(
        'helloworld',
        '',
        vscode.SymbolKind.Package,
        new vscode.Range(0, 0, 0, 19),
        new vscode.Range(0, 0, 0, 19)
    )
    const classSymbol: vscode.DocumentSymbol = new vscode.DocumentSymbol(
        'App',
        '',
        vscode.SymbolKind.Class,
        new vscode.Range(15, 0, 47, 1),
        new vscode.Range(18, 13, 18, 16)
    )
    const handleRequestSymbol: vscode.DocumentSymbol = new vscode.DocumentSymbol(
        'handleRequest(APIGatewayProxyRequestEvent, Context)',
        ' : APIGatewayProxyResponseEvent',
        vscode.SymbolKind.Method,
        new vscode.Range(20, 4, 39, 5),
        new vscode.Range(20, 40, 20, 53)
    )
    const privateMethodSymbol: vscode.DocumentSymbol = new vscode.DocumentSymbol(
        'getPageContents(String)',
        ' : String',
        vscode.SymbolKind.Method,
        new vscode.Range(41, 4, 46, 5),
        new vscode.Range(41, 19, 41, 34)
    )

    classSymbol.children.push(handleRequestSymbol)
    classSymbol.children.push(privateMethodSymbol)

    return [packageSymbol, classSymbol]
}

export function getFunctionText(): string {
    return String.raw`package helloworld;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyResponseEvent;

/**
 * Handler for requests to Lambda function.
 */
public class App implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {

    public APIGatewayProxyResponseEvent handleRequest(final APIGatewayProxyRequestEvent input, final Context context) {
        Map<String, String> headers = new HashMap<>();
        headers.put("Content-Type", "application/json");
        headers.put("X-Custom-Header", "application/json");

        APIGatewayProxyResponseEvent response = new APIGatewayProxyResponseEvent()
                .withHeaders(headers);
        try {
            final String pageContents = this.getPageContents("https://checkip.amazonaws.com");
            String output = String.format("{ \"message\": \"hello world\", \"location\": \"%s\" }", pageContents);

            return response
                    .withStatusCode(200)
                    .withBody(output);
        } catch (IOException e) {
            return response
                    .withBody("{}")
                    .withStatusCode(500);
        }
    }

    private String getPageContents(String address) throws IOException{
        URL url = new URL(address);
        try(BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()))) {
            return br.lines().collect(Collectors.joining(System.lineSeparator()));
        }
    }
}

`
}
