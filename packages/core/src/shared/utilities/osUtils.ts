/*!
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

import globals from '../extensionGlobals'
import { fs } from '../fs/fs'
import { tempDirPath } from '../filesystemUtilities'
import path from 'path'
import { getExtensionId } from '../extensionUtilities'

/**
 * Checks if the current OS session is new.
 *
 * @returns `true` if this is the First call to this function across all extension instances
 * since the OS was last restarted, subsequent calls return `false`.
 *
 * Use this function to perform one-time initialization tasks that should only happen
 * once per OS session, regardless of how many extension instances are running.
 */
export async function isNewOsSession(tmpDir = tempDirPath) {
    switch (process.platform) {
        case 'win32': {
            // Windows does not have an ephemeral /tmp/ folder that deletes on shutdown, while unix-like os's do.
            // So in Windows we calculate the start time and see if it changed from the previous known start time.

            const lastStartTime = globals.globalState.tryGet('lastOsStartTime', Number)
            // uptime() returns seconds, convert to ms
            const currentOsStartTime = Date.now() - process.uptime() * 1000

            if (lastStartTime === undefined) {
                await globals.globalState.update('lastOsStartTime', currentOsStartTime)
                return true
            }

            // If the current start time is later than the last, it means we are in a new session
            // But remove a few seconds to account for a small delay between getting the current time and
            // actually comparing it.
            if (currentOsStartTime - 2000 > lastStartTime) {
                await globals.globalState.update('lastOsStartTime', currentOsStartTime)
                return true
            }

            return false
        }
        default: {
            // Store a file in /tmp/ that acts as a flag. The OS automatically deletes on system shutdown.
            const unixNewSessionPath = path.join(tmpDir, `sessionStart-${getExtensionId()}`)

            if (await fs.exists(unixNewSessionPath)) {
                return false
            }

            await fs.writeFile(
                unixNewSessionPath,
                `This file is autogenerated by the VS Code extension: ${getExtensionId()}`
            )
            return true
        }
    }
}
