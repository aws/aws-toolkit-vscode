// See https://go.microsoft.com/fwlink/?LinkId=733558
// for the documentation about the tasks.json format
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "extensionInit",
            "type": "shell",
            "command": "echo 'extensionInit'",
            "dependsOn": ["copyPackageJson", "watch"],
            "presentation": {
                "close": true
            }
        },
        {
            "label": "watch",
            "type": "npm",
            "script": "watch",
            "problemMatcher": "$tsc-watch",
            "isBackground": true,
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "dependsOn": ["watchCore", "serve"]
        },
        {
            "label": "serve",
            "type": "npm",
            "script": "serve",
            "group": "build",
            "isBackground": true,
            "problemMatcher": {
                "owner": "custom",
                "pattern": {
                    "regexp": ".",
                    "file": 1,
                    "location": 2,
                    "message": 3
                },
                "background": {
                    "activeOnStart": true,
                    "beginsPattern": "Project is running at",
                    "endsPattern": "compiled"
                }
            },
            "options": {
                "env": {
                    // This is the lowest GB I found to avoid heap allocation errors if you reload the debugging instance.
                    // May not work for everyone, and may not be enough under certain conditions. We will have
                    // to re-adjust as needed. I think the reason we need this is because of the large number of sourcemaps
                    // generated by the core-lib, but more research is needed.
                    "NODE_OPTIONS": "--max_old_space_size=5120"
                }
            }
        },
        {
            "label": "webWatch",
            "type": "npm",
            "script": "webWatch",
            "detail": "Webpacks our toolkit code (with --watch) in preparation to be run in the browser",
            "isBackground": true,
            // Since `webpack --watch` never terminates (but finishes packaging at some point),
            // VS Code uses this to parse the CLI output to pattern match something that indicates it is done
            "problemMatcher": "$ts-webpack-watch",
            "dependsOn": ["copyPackageJson"]
        },
        {
            "label": "webRun",
            "type": "npm",
            "script": "webRun",
            "detail": "Runs VS Code in the Chrome browser with our toolkit installed",
            "isBackground": true,
            "dependsOn": ["webWatch"],
            /**
            We only need this problem matcher to signal when this task is completed.
            Since this task starts a web server it does not terminate and we need to use
            problemMatcher.background.endsPattern to read the CLI and know when this task
            can signal it is done.

            The rest of the data in problemMatcher is required by VS Code to be "valid",
            but not important for what we need.

            Doc: https://code.visualstudio.com/Docs/editor/tasks#_defining-a-problem-matcher
            **/
            "problemMatcher": {
                "pattern": [
                    {
                        "regexp": "this section irrelevant but it must exist to work",
                        "file": 1,
                        "location": 2,
                        "message": 3
                    }
                ],
                "background": {
                    "activeOnStart": true,
                    "beginsPattern": "^@vscode/test-web",
                    "endsPattern": "^Listening on"
                }
            }
        },
        {
            "label": "watchCore",
            "command": "npm run compileLite -- --watch",
            "type": "shell",
            "isBackground": true,
            "problemMatcher": {
                "owner": "custom",
                "pattern": {
                    "regexp": ".",
                    "file": 1,
                    "location": 2,
                    "message": 3
                },
                "background": {
                    "activeOnStart": true,
                    "beginsPattern": "Starting compilation",
                    "endsPattern": "Watching for file changes."
                }
            },
            "options": {
                "cwd": "../core"
            }
        },
        {
            "label": "copyPackageJson",
            "type": "npm",
            "script": "copyPackageJson",
            "problemMatcher": [],
            "isBackground": false,
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "presentation": {
                "close": true
            }
        },
        {
            "label": "restorePackageJson",
            "type": "npm",
            "script": "restorePackageJson",
            "problemMatcher": [],
            "isBackground": false,
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "presentation": {
                "close": true
            }
        },
        {
            "label": "extensionTerminate",
            "command": "echo run terminate",
            "type": "shell",
            "presentation": {
                "close": true
            },
            "dependsOn": ["restorePackageJson"]
        },
        /**
        After we stop debugging our browser, we also want to stop the web server.
        When this task is ran it will stop the web server.

        From: https://stackoverflow.com/a/60330174
        **/
        {
            "label": "webRunTerminate",
            "command": "echo ${input:webRunTerminate}",
            "type": "shell",
            "dependsOn": ["restorePackageJson"]
        },
        {
            "type": "npm",
            "script": "lint",
            "problemMatcher": "$eslint-stylish"
        },
        {
            "type": "npm",
            "script": "lintfix",
            "problemMatcher": "$eslint-stylish"
        },
        {
            "type": "npm",
            "script": "compile",
            "dependsOn": ["Kill Tasks", "copyPackageJson"],
            "problemMatcher": "$tsc"
        },
        {
            "type": "npm",
            "script": "clean",
            "dependsOn": ["Kill Tasks"],
            "problemMatcher": []
        },
        {
            "label": "Kill Tasks",
            "type": "process",
            "command": "${input:killTasks}",
            "problemMatcher": []
        }
    ],
    "inputs": [
        {
            "id": "killTasks",
            "type": "command",
            "command": "workbench.action.tasks.terminate",
            "args": "terminateAll"
        },
        {
            "id": "webRunTerminate",
            "type": "command",
            "command": "workbench.action.tasks.terminate",
            "args": "webRun"
        }
    ]
}
