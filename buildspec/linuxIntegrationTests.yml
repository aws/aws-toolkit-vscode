version: 0.2

phases:
    install:
        runtime-versions:
            nodejs: 10

        commands:
            # Install required keys and repos for .NET Core 2.1
            - apt-get update
            - wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | apt-key add -
            - wget -q https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
            - dpkg -i packages-microsoft-prod.deb
            - add-apt-repository universe
            - apt-get install -y apt-transport-https
            - apt-get update
            # Install .NET Core 2.1
            - apt-get install -y dotnet-sdk-2.1
            # Install other needed dependencies
            - apt-get install -y python2.7 python-pip python3.6 python3.7 python3.8 python3-pip python3-distutils docker
            - apt-get install -y libgtk-3-dev libxss1 xvfb libnss3-dev libasound2 libasound2-plugins libsecret-1-0
            - pip3 install --user aws-sam-cli
            - pip3 install --upgrade awscli
            - pip3 install pylint

    pre_build:
        commands:
            # make sure that SAM is in the path, is not automatically done on CodeBuild
            - USER_BASE_PATH=$(python -m site --user-base) && export PATH=$PATH:$USER_BASE_PATH/bin
            # start Docker
            - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay&
            - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
            # Pull SAM related images to avoid delays/timeouts during 'sam local invoke' calls within tests
            - docker pull lambci/lambda:nodejs8.10
            - docker pull lambci/lambda:nodejs10.x
            - docker pull lambci/lambda:nodejs12.x
            - docker pull lambci/lambda:python2.7
            - docker pull lambci/lambda:python3.6
            - docker pull lambci/lambda:python3.7
            - docker pull lambci/lambda:python3.8

    build:
        commands:
            - export AWS_TOOLKIT_TEST_USER_DIR=/tmp/
            - export AWS_TOOLKIT_TEST_NO_COLOR=1
            - npm install --unsafe-perm
            - xvfb-run npm run integrationTest

reports:
    integ-test:
        files:
            - '*'
        base-directory: '.test-reports'
