version: 0.2

env:
    variables:
        AWS_TOOLKIT_TEST_USER_DIR: '/tmp/'
        AWS_TOOLKIT_TEST_NO_COLOR: '1'
        NO_COVERAGE: 'true'
        # Suppress noisy apt-get/dpkg warnings like "debconf: unable to initialize frontend: Dialog").
        DEBIAN_FRONTEND: 'noninteractive'

phases:
    install:
        runtime-versions:
            nodejs: 16
            dotnet: 3.1
            java: latest

        commands:
            - '>/dev/null add-apt-repository universe'
            - '>/dev/null apt-get -qq install -y apt-transport-https'
            - '>/dev/null apt-get -qq update'
            - '>/dev/null apt-get -qq install -y ca-certificates'
            - 'apt-get install --reinstall ca-certificates'
            - 'add-apt-repository -y ppa:deadsnakes/ppa'
            # Install other needed dependencies
            - 'apt-get -qq install -y jq python3.7 python3.8 python3-pip'
            # Fail early if any of these not found.
            - 'python3.7 --version'
            - 'python3.8 --version'
            - 'python3.9 --version'
            - '>/dev/null apt-get -qq install -y libgtk-3-dev libxss1 xvfb libnss3-dev libasound2 libasound2-plugins libsecret-1-0'
            - '>/dev/null pip3 install --upgrade aws-sam-cli'
            # Print info about sam (version, location, â€¦).
            - 'pip3 show aws-sam-cli'
            - '>/dev/null pip3 install --upgrade awscli'
            - '>/dev/null pip3 install pylint'
            # Install latest version of Go (known to 'goenv')
            - '>/dev/null VERSION=$(goenv install --list | tail -n 1) && 2>/dev/null goenv install $VERSION'
            - '>/dev/null goenv global $VERSION && go env -w GOPROXY=direct'
            - go version
            # login to DockerHub so we don't get throttled
            - docker login --username $(echo $DOCKER_HUB_TOKEN | jq -r '.username') --password $(echo $DOCKER_HUB_TOKEN | jq -r '.password') || true
            # increase file watcher count so CodeLens tests do not fail unexpectedly (ENOSPC error)
            - sysctl fs.inotify.max_user_watches=524288

    pre_build:
        commands:
            # If present, log into CodeArtifact. Provides a nice safety net in case NPM is down.
            # Should only affect tests run through IDEs team-hosted CodeBuild.
            - |
                if [ "$TOOLKITS_CODEARTIFACT_DOMAIN" ] && [ "$TOOLKITS_CODEARTIFACT_REPO" ] && [ "TOOLKITS_$ACCOUNT_ID" ]; then
                    if aws codeartifact login --tool npm --domain "$TOOLKITS_CODEARTIFACT_DOMAIN" --domain-owner "$TOOLKITS_ACCOUNT_ID" --repository "$TOOLKITS_CODEARTIFACT_REPO" > /dev/null 2>&1; then
                        echo "Connected to CodeArtifact"
                    else
                        echo "CodeArtifact connection failed. Falling back to npm"
                    fi
                fi
            # make sure that SAM is in the path, is not automatically done on CodeBuild
            - USER_BASE_PATH=$(python -m site --user-base) && export PATH=$PATH:$USER_BASE_PATH/bin
            # start Docker
            - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay&
            - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"

    build:
        commands:
            - npm ci --unsafe-perm
            - xvfb-run npm run integrationTest
            - VCS_COMMIT_ID="${CODEBUILD_RESOLVED_SOURCE_VERSION}"
            - CI_BUILD_URL=$(echo $CODEBUILD_BUILD_URL | sed 's/#/%23/g')
            - CI_BUILD_ID="${CODEBUILD_BUILD_ID}"

reports:
    integ-test:
        files:
            - '*'
        base-directory: '.test-reports'
